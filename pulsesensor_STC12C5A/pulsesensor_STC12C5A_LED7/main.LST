C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*************************************************************************
   2          ********                                                           *******            
   3          ********    网店：【星辉科技电子】http://shop108071095.taobao.com/  *******
   4          ********                                                            *******
   5          ********    旺旺： anning86525                                      ******
   6          ********                                                            *******
   7          **************************************************************************/
   8          //******************************参数说明*********************************//
   9          //MCU:STC12C5A60S2
  10          //ADC PIN:P1.0
  11          //SYSTEM CLOCK:11.0592MHz
  12          //Baudrate:115200
  13          //UART:P3.0 P3.1
  14          //**********************************************************************//
  15          #include <STC12C5A60S2.h>
  16          #include "stdio.h"
  17          
  18          #define false 0
  19          #define true 1
  20          #define FOSC 11059200L    //系统时钟
  21          #define BAUD 115200       //波特率
  22          #define T0MS (65536-FOSC/12/500)    //500HZ in 12T MODE
  23          
  24          #define ADC_POWER 0x80      //ADC POWER CONTROL BIT
  25          #define ADC_FLAG 0x10     //ADC COMPLETE FLAG
  26          #define ADC_START 0x08;     //ADC START CONTROL BIT
  27          #define ADC_SPEEDLL 0x00    //540 CLOCKS
  28          #define ADC_SPEEDL 0x20     //360 CLOCKS
  29          #define ADC_SPEEDH 0x40     //180 CLOCKS
  30          #define ADC_SPEEDHH 0x60    //90 CLOCKS
  31          #define ADC_MASK 0x01
  32          
  33          //数码管段码显示：0~f,不亮
  34          unsigned char code LED_Disp[] = {0xC0,0xF9,0xA4,0xB0,
  35                                  0x99,0x92,0x82,0xF8,
  36                      0x80,0x90,0x88,0x83,
  37                      0xC6,0xA1,0x86,0x8E};
  38          
  39          sfr LedPort = 0x80;  //段选段P0
  40          sfr LedCtrl = 0xa0;  //位选段P2
  41          unsigned char DisBuff[3];
  42          
  43          void UART_init(void); 
  44          void LED_Disp_Seg7(void);
  45          void ADC_init(unsigned char channel);
  46          void T0_init(void);
  47          void sendDataToProcessing(char symbol, int dat);
  48          void delay(unsigned int n);
  49          void UART_send(char dat);
  50          
  51          unsigned char PulsePin = 0;       // Pulse Sensor purple wire connected to analog pin 0(P1.0为AD口)
  52          sbit blinkPin = P2^0;                // pin to blink led at each beat
  53          sbit fadePin = P2^3;                  // pin to do fancy classy fading blink at each beat
  54          sbit led1 = P2^1;
  55          sbit led2 = P2^2;
C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 2   

  56          int fadeRate = 0;                 // used to fade LED on with PWM on fadePin
  57          
  58          
  59          // these variables are volatile because they are used during the interrupt service routine!
  60          volatile unsigned int BPM;                   // used to hold the pulse rate
  61          volatile unsigned int Signal;                // holds the incoming raw data
  62          volatile unsigned int IBI = 600;             // holds the time between beats, must be seeded! 
  63          volatile bit Pulse = false;     // true when pulse wave is high, false when it's low
  64          volatile bit QS = false;        // becomes true when Arduoino finds a beat.
  65          volatile int rate[10];                    // array to hold last ten IBI values
  66          volatile unsigned long sampleCounter = 0;          // used to determine pulse timing
  67          volatile unsigned long lastBeatTime = 0;           // used to find IBI
  68          volatile int Peak =512;                      // used to find peak in pulse wave, seeded
  69          volatile int Trough = 512;                     // used to find trough in pulse wave, seeded
  70          volatile int thresh = 512;                // used to find instant moment of heart beat, seeded
  71          volatile int amp = 100;                   // used to hold amplitude of pulse waveform, seeded
  72          volatile bit firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
  73          volatile bit secondBeat = false;      // used to seed rate array so we startup with reasonable BPM
  74          static unsigned char order=0;
  75          
  76          void sys_init()
  77          {
  78   1        //pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!
  79   1        //pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!
  80   1        UART_init();             // we agree to talk fast!
  81   1        ADC_init(PulsePin);
  82   1        T0_init();                 // sets up to read Pulse Sensor signal every 2mS  
  83   1      }
  84          
  85          void main(void)
  86          {
  87   1        sys_init();
  88   1        while(1)
  89   1        {
  90   2          sendDataToProcessing('S', Signal);     // send Processing the raw Pulse Sensor data
  91   2          if (QS == true){                       // Quantified Self flag is true when arduino finds a heartbeat
  92   3                fadeRate = 255;                  // Set 'fadeRate' Variable to 255 to fade LED with pulse
  93   3                sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix
  94   3                sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix
  95   3                QS = false;                      // reset the Quantified Self flag for next time    
  96   3             }
  97   2        
  98   2        //ledFadeToBeat();
  99   2      
 100   2        delay(138);                             //  take a break 19.6ms
 101   2      
 102   2      }
 103   1      }
 104          
 105          
 106          //void ledFadeToBeat(){
 107          //    fadeRate -= 15;                         //  set LED fade value
 108          //    fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!
 109          //    analogWrite(fadePin,fadeRate);          //  fade LED
 110          //  }
 111          
 112          
 113          void sendDataToProcessing(char symbol, int dat ){
 114   1          putchar(symbol);                // symbol prefix tells Processing what type of data is coming
 115   1          printf("%d\r\n",dat);           // the data to send culminating in a carriage return
 116   1        }
 117          
C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 3   

 118          void UART_init(void)
 119          {
 120   1         PCON &= 0x7f;  //波特率不倍速
 121   1         SCON = 0x50;  //8位数据，可变波特率
 122   1         BRT = 0xFD;    //独立波特率产生器初值
 123   1         AUXR |= 0x04;  //时钟设置为1T模式
 124   1         AUXR |= 0x01;  //选择独立波特率产生器
 125   1         AUXR |= 0x10;  //启动波特率产生
 126   1      }
 127           char putchar(unsigned char dat)
 128          {
 129   1        TI=0;
 130   1        SBUF=dat;
 131   1        while(!TI);
 132   1        TI=0;
 133   1        
 134   1        return SBUF;
 135   1      }
 136          void delay(unsigned int n)
 137          {
 138   1        unsigned int i,j;
 139   1        for(i=0;i<n;i++)
 140   1          for(j=0;j<100;j++);
 141   1      }
 142          void LED_Disp_Seg7(void)
 143          {
 144   1      
 145   1        LedCtrl = LedCtrl | 0xf0;
 146   1        switch(order)
 147   1        {
 148   2          case 0:
 149   2            LedPort = LED_Disp[DisBuff[0]];
 150   2            LedCtrl = LedCtrl & 0x7f;
 151   2            break;
 152   2          case 1:
 153   2            LedPort = LED_Disp[DisBuff[1]];
 154   2            LedCtrl = LedCtrl & 0xbf;
 155   2            break;
 156   2          case 2:
 157   2            if(DisBuff[2]==0)
 158   2              LedCtrl = LedCtrl | 0xf0;
 159   2            else
 160   2            {
 161   3              LedPort = LED_Disp[DisBuff[2]];
 162   3              LedCtrl = LedCtrl & 0xdf;
 163   3            }
 164   2            break;
 165   2          default:
 166   2            LedCtrl = LedCtrl | 0xf0;
 167   2        }
 168   1         if(++order>2)
 169   1            order=0;
 170   1      }
 171          
 172          
 173          
 174          
 175          void T0_init(void){     
 176   1        // Initializes Timer0 to throw an interrupt every 2mS.
 177   1        TMOD |= 0x01; //16bit TIMER
 178   1        TL0=T0MS;
 179   1        TH0=T0MS>>8;
C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 4   

 180   1        TR0=1;    //start Timer 0
 181   1        ET0=1;    //enable Timer Interrupt
 182   1        EA=1;             // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
 183   1      } 
 184          
 185          void ADC_init(unsigned char channel)
 186          {
 187   1        P1ASF=ADC_MASK<<channel;  //enable PlusePin as ADC INPUT
 188   1        ADC_RES=0;  //clear former ADC result
 189   1        ADC_RESL=0; //clear former ADC result
 190   1        AUXR1 |= 0x04;  //adjust the format of ADC result
 191   1        ADC_CONTR=channel|ADC_POWER|ADC_SPEEDLL|ADC_START;  //power on ADC and start conversion
 192   1      }
 193          
 194          unsigned int analogRead(unsigned char channel)
 195          {
 196   1        unsigned int result;
 197   1      
 198   1        ADC_CONTR &=!ADC_FLAG;  //clear ADC FLAG
 199   1        result=ADC_RES;
 200   1        result=result<<8;
 201   1        result+=ADC_RESL;
 202   1        ADC_CONTR|=channel|ADC_POWER|ADC_SPEEDLL|ADC_START;
 203   1        return result;
 204   1      }
 205          // Timer 0中断子程序，每2MS中断一次，读取AD值，计算心率值
 206          void Timer0_rountine(void) interrupt 1
 207          {                       
 208   1        int N;
 209   1        unsigned char i;
 210   1        // keep a running total of the last 10 IBI values
 211   1        unsigned int runningTotal = 0;                  // clear the runningTotal variable    
 212   1      
 213   1        EA=0;                                      // disable interrupts while we do this
 214   1        TL0=T0MS;
 215   1        TH0=T0MS>>8;        //reload 16 bit TIMER0
 216   1        Signal = analogRead(PulsePin);              // read the Pulse Sensor 
 217   1        sampleCounter += 2;                         // keep track of the time in mS with this variable
 218   1        N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 219   1        LED_Disp_Seg7();
 220   1      
 221   1      
 222   1          //  find the peak and trough of the pulse wave
 223   1        if(Signal < thresh && N > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
 224   2          if (Signal < Trough){                        // T is the trough
 225   3            Trough = Signal;                         // keep track of lowest point in pulse wave 
 226   3          }
 227   2        }
 228   1      
 229   1        if(Signal > thresh && Signal > Peak){          // thresh condition helps avoid noise
 230   2          Peak = Signal;                             // P is the peak
 231   2        }                                        // keep track of highest point in pulse wave
 232   1      
 233   1        //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
 234   1        // signal surges up in value every time there is a pulse
 235   1        if (N > 250){                                   // avoid high frequency noise
 236   2          if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) ){        
 237   3            Pulse = true;                               // set the Pulse flag when we think there is a pulse
 238   3            blinkPin=0;               // turn on pin 13 LED
 239   3            IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 240   3            lastBeatTime = sampleCounter;               // keep track of time for next pulse
 241   3      
C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 5   

 242   3            if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
 243   4              secondBeat = false;                  // clear secondBeat flag
 244   4              for(i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 245   5                rate[i] = IBI;                      
 246   5              }
 247   4            }
 248   3      
 249   3            if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TR
             -UE
 250   4              firstBeat = false;                   // clear firstBeat flag
 251   4              secondBeat = true;                   // set the second beat flag
 252   4              EA=1;                               // enable interrupts again
 253   4              return;                              // IBI value is unreliable so discard it
 254   4            }   
 255   3      
 256   3      
 257   3      
 258   3            for(i=0; i<=8; i++){                // shift data in the rate array
 259   4              rate[i] = rate[i+1];                  // and drop the oldest IBI value 
 260   4              runningTotal += rate[i];              // add up the 9 oldest IBI values
 261   4            }
 262   3      
 263   3            rate[9] = IBI;                          // add the latest IBI to the rate array
 264   3            runningTotal += rate[9];                // add the latest IBI to runningTotal
 265   3            runningTotal /= 10;                     // average the last 10 IBI values 
 266   3            BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
 267   3            if(BPM>200)BPM=200;     //限制BPM最高显示值
 268   3            if(BPM<30)BPM=30;       //限制BPM最低显示值
 269   3            DisBuff[0]   = BPM%10;//取个位数
 270   3            DisBuff[1]   = BPM%100/10; //取十位数
 271   3            DisBuff[2]   = BPM/100;    //百位数
 272   3            QS = true;                              // set Quantified Self flag 
 273   3            // QS FLAG IS NOT CLEARED INSIDE THIS ISR
 274   3          }                       
 275   2        }
 276   1      
 277   1        if (Signal < thresh && Pulse == true){   // when the values are going down, the beat is over
 278   2          blinkPin=1;            // turn off pin 13 LED
 279   2          Pulse = false;                         // reset the Pulse flag so we can do it again
 280   2          amp = Peak - Trough;                           // get amplitude of the pulse wave
 281   2          thresh = amp/2 + Trough;                    // set thresh at 50% of the amplitude
 282   2          Peak = thresh;                            // reset these for next time
 283   2          Trough = thresh;
 284   2        }
 285   1      
 286   1        if (N > 2500){                           // if 2.5 seconds go by without a beat
 287   2          thresh = 512;                          // set thresh default
 288   2          Peak = 512;                               // set P default
 289   2          Trough = 512;                               // set T default
 290   2          lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date        
 291   2          firstBeat = true;                      // set these to avoid noise
 292   2          secondBeat = false;                    // when we get the heartbeat back
 293   2        }
 294   1      
 295   1        EA=1;                                   // enable interrupts when youre done!
 296   1      }// end isr


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    928    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.54   MAIN                                                                  04/26/2019 23:06:12 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
